// source: room.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.user.DynamicMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.DynamicMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.DynamicMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.DynamicMessage.displayName = 'proto.user.DynamicMessage';
}

proto.user.DynamicMessage.prototype.getFields

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.user.DynamicMessage.prototype.toObject = function(opt_includeInstance) {
      return proto.user.DynamicMessage.toObject(opt_includeInstance, this);
    };
    
    
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.user.DynamicMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.user.DynamicMessage.toObject = function(includeInstance, msg) {
    
      var f, obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        token: jspb.Message.getFieldWithDefault(msg, 2, "")
      };
    
      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
    }
    
    
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.user.DynamicMessage}
     */
    proto.user.DynamicMessage.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.user.DynamicMessage;
      return proto.user.DynamicMessage.deserializeBinaryFromReader(msg, reader);
    };
    
    
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.user.DynamicMessage} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.user.DynamicMessage}
     */
    proto.user.DynamicMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setToken(value);
          break;
        default:
          reader.skipField();
          break;
        }
      }
      return msg;
    };
    
    
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */
    proto.user.DynamicMessage.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.user.DynamicMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    
    
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.user.DynamicMessage} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.user.DynamicMessage.serializeBinaryToWriter = function(message, writer) {
      var f = undefined;
      f = message.getName();
      if (f.length > 0) {
        writer.writeString(
          1,
          f
        );
      }
      f = /** @type {string} */ (jspb.Message.getField(message, 2));
      if (f != null) {
        writer.writeString(
          2,
          f
        );
      }
    };
    
    
    /**
     * optional string name = 1;
     * @return {string}
     */
    proto.user.DynamicMessage.prototype.getName = function() {
      return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
    };
    
    
    /**
     * @param {string} value
     * @return {!proto.user.DynamicMessage} returns this
     */
    proto.user.DynamicMessage.prototype.setName = function(value) {
      return jspb.Message.setProto3StringField(this, 1, value);
    };
    
    
    /**
     * optional string token = 2;
     * @return {string}
     */
    proto.user.DynamicMessage.prototype.getToken = function() {
      return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
    };
    
    
    /**
     * @param {string} value
     * @return {!proto.user.DynamicMessage} returns this
     */
    proto.user.DynamicMessage.prototype.setToken = function(value) {
      return jspb.Message.setField(this, 2, value);
    };
    
    
    /**
     * Clears the field making it undefined.
     * @return {!proto.user.DynamicMessage} returns this
     */
    proto.user.DynamicMessage.prototype.clearToken = function() {
      return jspb.Message.setField(this, 2, undefined);
    };
    
    
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */
    proto.user.DynamicMessage.prototype.hasToken = function() {
      return jspb.Message.getField(this, 2) != null;
    };
    